name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2']
        wordpress-version: ['6.0', '6.1', '6.2', '6.3', 'latest']
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, mysqli, pdo_mysql
        tools: composer, phpunit
        coverage: xdebug

    - name: Validate composer.json
      run: composer validate --strict

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Setup WordPress test environment
      run: |
        bash bin/install-wp-tests.sh wordpress_test root root 127.0.0.1:3306 ${{ matrix.wordpress-version }}

    - name: Run PHPUnit tests
      run: vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, mysqli, pdo_mysql
        tools: composer, phpcs, phpstan

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Run PHP CodeSniffer
      run: vendor/bin/phpcs --standard=WordPress --extensions=php .

    - name: Run PHPStan
      run: vendor/bin/phpstan analyse --level=5 includes/

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint:js

    - name: Run Stylelint
      run: npm run lint:css

  security:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: composer

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Run security audit
      run: composer audit

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install npm dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit

  build:
    name: Build Plugin
    runs-on: ubuntu-latest
    needs: [test, code-quality, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Create plugin ZIP
      run: npm run zip

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cdswerx-plugin-${{ github.sha }}
        path: cdswerx-plugin.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: cdswerx-plugin-${{ github.sha }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./cdswerx-plugin.zip
        asset_name: cdswerx-plugin-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

    - name: Deploy to WordPress.org
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "Deploying to WordPress.org repository"
        # Add WordPress.org SVN deployment logic here
      env:
        WP_ORG_USERNAME: ${{ secrets.WP_ORG_USERNAME }}
        WP_ORG_PASSWORD: ${{ secrets.WP_ORG_PASSWORD }}