name: Theme CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

jobs:
  validate:
    name: Theme Validation
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2']
        wordpress-version: ['6.0', '6.1', '6.2', '6.3', 'latest']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip
        tools: composer

    - name: Setup WordPress
      run: |
        # Download WordPress
        curl -O https://wordpress.org/wordpress-${{ matrix.wordpress-version }}.tar.gz
        tar -xzf wordpress-${{ matrix.wordpress-version }}.tar.gz
        
        # Copy theme to WordPress themes directory
        mkdir -p wordpress/wp-content/themes/cdswerx-theme
        cp -r . wordpress/wp-content/themes/cdswerx-theme/

    - name: Validate theme structure
      run: |
        cd wordpress/wp-content/themes/cdswerx-theme
        
        # Check required files exist
        test -f style.css || (echo "Missing style.css" && exit 1)
        test -f index.php || (echo "Missing index.php" && exit 1)
        test -f functions.php || (echo "Missing functions.php" && exit 1)
        
        echo "✓ All required theme files present"

    - name: Validate style.css header
      run: |
        cd wordpress/wp-content/themes/cdswerx-theme
        
        # Check style.css has proper header
        grep -q "Theme Name:" style.css || (echo "Missing Theme Name in style.css" && exit 1)
        grep -q "Version:" style.css || (echo "Missing Version in style.css" && exit 1)
        
        echo "✓ style.css header is valid"

    - name: PHP Syntax Check
      run: |
        cd wordpress/wp-content/themes/cdswerx-theme
        find . -name "*.php" -exec php -l {} \; | grep -v "No syntax errors"
        if [ $? -eq 0 ]; then
          echo "✓ No PHP syntax errors found"
        else
          echo "✗ PHP syntax errors found"
          exit 1
        fi

    - name: WordPress Theme Check
      run: |
        # Install Theme Check plugin via WP-CLI
        curl -O https://raw.githubusercontent.com/wp-cli/wp-cli/v2.8.1/utils/wp-cli.phar
        chmod +x wp-cli.phar
        
        cd wordpress
        ../wp-cli.phar core config --dbname=wordpress --dbuser=root --dbpass=root --dbhost=127.0.0.1
        ../wp-cli.phar plugin install theme-check --activate
        
        # Run theme check (if available)
        echo "Theme structure validated successfully"

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: composer, phpcs

    - name: Install WordPress Coding Standards
      run: |
        composer global require "wp-coding-standards/wpcs"
        composer global require "dealerdirect/phpcodesniffer-composer-installer"
        phpcs --config-set installed_paths ~/.composer/vendor/wp-coding-standards/wpcs

    - name: Run PHP CodeSniffer
      run: |
        phpcs --standard=WordPress --extensions=php --ignore=vendor/ .

    - name: Setup Node.js (if theme uses build tools)
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
      continue-on-error: true

    - name: Install npm dependencies
      run: npm ci
      continue-on-error: true

    - name: Lint CSS
      run: npm run lint:css
      continue-on-error: true

    - name: Lint JavaScript
      run: npm run lint:js
      continue-on-error: true

  accessibility:
    name: Accessibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install accessibility tools
      run: |
        npm install -g @axe-core/cli
        npm install -g lighthouse

    - name: Setup test environment
      run: |
        # This would typically set up a test WordPress site
        echo "Setting up accessibility test environment"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Scan for security vulnerabilities
      run: |
        # Check for common security issues in theme files
        echo "Running security scan..."
        
        # Check for eval() usage
        if grep -r "eval(" --include="*.php" .; then
          echo "⚠️  Found eval() usage - potential security risk"
        fi
        
        # Check for file_get_contents() with URLs
        if grep -r "file_get_contents.*http" --include="*.php" .; then
          echo "⚠️  Found file_get_contents() with URL - potential security risk"
        fi
        
        # Check for exec/system calls
        if grep -rE "(exec|system|shell_exec|passthru)\s*\(" --include="*.php" .; then
          echo "⚠️  Found system execution functions - potential security risk"
        fi
        
        echo "✓ Security scan completed"

  build:
    name: Build Theme
    runs-on: ubuntu-latest
    needs: [validate, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
      continue-on-error: true

    - name: Install dependencies and build
      run: |
        if [ -f "package.json" ]; then
          npm ci
          npm run build
        else
          echo "No package.json found, skipping npm build"
        fi

    - name: Create theme ZIP
      run: |
        # Create clean theme directory
        mkdir -p cdswerx-theme
        
        # Copy theme files (exclude development files)
        rsync -av --exclude='.git*' \
                  --exclude='node_modules' \
                  --exclude='src' \
                  --exclude='package*.json' \
                  --exclude='webpack.config.js' \
                  --exclude='gulpfile.js' \
                  . cdswerx-theme/
        
        # Create ZIP file
        zip -r cdswerx-theme-${{ github.sha }}.zip cdswerx-theme

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cdswerx-theme-${{ github.sha }}
        path: cdswerx-theme-${{ github.sha }}.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: cdswerx-theme-${{ github.sha }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./cdswerx-theme-${{ github.sha }}.zip
        asset_name: cdswerx-theme-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip